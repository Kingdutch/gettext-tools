#!/usr/bin/env node

'use strict';

require('colors');

const fs = require('fs');
const readline = require('readline');
const gettextParser = require('gettext-parser');
const jsep = require('jsep');

// Command Handling
// ----------------------------------------------------------------------------
if (process.argv.length === 5) {
  mergeAction({
    complete: process.argv[2],
    subset: process.argv[3],
    output: process.argv[4],
  });
}
else if (process.argv.length === 6 && ['--yes', '-y', '--no', '-n'].indexOf(process.argv[2]) !== -1) {
  mergeAction({
    complete: process.argv[3],
    subset: process.argv[4],
    output: process.argv[5],
  }, process.argv[2].replace(/-/g, ''));
}
else {
    console.log("Usage: node msgintersect [--yes/--no] :complete :subset :output");
    console.log("Prompts can be skipped with --yes or --no for non-interactive execution.");
    process.exit(1);
}

/**
 * Parses a gettext Plural-Forms string.
 *
 * @param str
 *   The string of the Plural-Forms header field of a po file.
 * @return {{pluralCount: *, pluralCondition: *}}
 *   Returns the number of plurals and a normalised expression tree for
 *   the pluralCondition.
 */
function parsePluralForm(str) {
  const PLURAL_FORM_REGEXP = /^\s*nplurals\s*=\s*([0-9]);\s*plural\s*=([\s%|&!=?:()<>0-9n]+)\s*;?\s*$/;

  // Try to parse the number of plurals and the plural-from string.
  const matches = PLURAL_FORM_REGEXP.exec(str);

  if (matches === null) {
    throw new Error(`Invalid Plural-Forms string found: '${str}'`);
  }

  // Ensure the pluralCount is an integer.
  const pluralCount = parseInt(matches[1], 10);
  // Parse the plural form string to an expression tree, this normalises any
  // use of space or brackets and allows comparison.
  const pluralCondition = jsep(matches[2]);

  return {
    pluralCount,
    pluralCondition,
  }
}

// Command Execution Callbacks
// ----------------------------------------------------------------------------

function mergeAction (data, overwrite = null) {
    if (!fs.existsSync(data.complete)) return error('> File "' + data.complete + '" not found.');
    if (!fs.existsSync(data.subset)) return error('> File "' + data.subset + '" not found.');

    console.info('> Loading files'.green);

    const translatedFile = fs.readFileSync(data.complete);
    const untranslatedFile = fs.readFileSync(data.subset);

    const translated = gettextParser.po.parse(translatedFile);
    let untranslated = gettextParser.po.parse(untranslatedFile);

    const translatedPluralForm = parsePluralForm(translated.headers['Plural-Forms']);
    const untranslatedPluralForm = parsePluralForm(untranslated.headers['Plural-Forms']);

    // If the plural forms are different then this could corrupt plural
    // translations so we can not continue.
    if (!deepEqual(translatedPluralForm, untranslatedPluralForm)) {
      return error(`Can not merge translations with differing plural-forms: '${translated.headers['Plural-Forms']}' to '${untranslated.headers['Plural-Forms']}'.`)
    }

    const translatedFoundCount = Object.values(translated.translations).reduce((count, context) => count + Object.keys(context).length, 0);
    const untranslatedFoundCount = Object.values(untranslated.translations).reduce((count, context) => count + Object.keys(context).length, 0);

    console.info('- Found %d strings in "%s"'.blue, translatedFoundCount, data.complete);
    console.info('- Found %d strings in "%s"'.blue, untranslatedFoundCount, data.subset);

    console.info('> Running comparison'.green);

    let translatedCount = 0;
    let notTranslatedCount = 0;

    Object.keys(untranslated.translations).forEach(context => {
      Object.keys(untranslated.translations[context]).forEach(msgid => {
        // Skip the header string.
        if (context === '' && msgid === '') {
          // Increase translated count because otherwise the "Found strings"
          // reporting doesn't add up.
          translatedCount++;
          return;
        }

        // Update the target translation if it exists.
        if (translated.translations[context] && translated.translations[context][msgid]) {
          untranslated.translations[context][msgid].msgstr = translated.translations[context][msgid].msgstr;
          translatedCount++;
        }
        else {
          notTranslatedCount++;
        }
      })
    });

    console.info('> Comparison finished'.green);
    console.info('- Found %d translated strings'.blue, translatedCount);
    console.info('- Found %d not translated strings'.blue, notTranslatedCount);

    const outputBuffer = gettextParser.po.compile(untranslated);

    if (fs.existsSync(data.output)) {
        const handleOverwrite = (answer) => {
          switch (answer) {
            case 'n':
            case 'no':
              console.info('> Merge cancelled.');
              break;
            case 'y':
            case 'yes':
              console.info('> Generating output'.green);
              writeOutput(data.output, outputBuffer);
              break;
            default:
              prompt(`File "${data.output}" already exists. Do you want to overwrite it? [yes/no] `, handleOverwrite);
          }
        };

        handleOverwrite(overwrite)
    } else {
        writeOutput(data.output, outputBuffer);
    }
}

// Helpers
// ----------------------------------------------------------------------------

function prompt(question, callback) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(question, (answer) => {
    rl.close();

    callback(answer);
  });
}

function error (messageString) {
    console.error(messageString.red);
    process.exit(1);
}

function writeOutput (fileName, outputBuffer) {
    fs.writeFileSync(fileName, outputBuffer);
}

function deepEqual(x, y) {
  if (x === y) {
    return true;
  }
  else if ((typeof x == "object" && x != null) && (typeof y == "object" && y != null)) {
    if (Object.keys(x).length !== Object.keys(y).length)
      return false;

    for (var prop in x) {
      if (y.hasOwnProperty(prop))
      {
        if (! deepEqual(x[prop], y[prop]))
          return false;
      }
      else
        return false;
    }

    return true;
  }
  else
    return false;
}