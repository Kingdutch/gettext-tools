#!/usr/bin/env node

'use strict';

require('colors');

const fs = require('fs');
const readline = require('readline');
const Gettext = require('node-gettext');

// Command Handling
// ----------------------------------------------------------------------------
if (process.argv.length === 5) {
  mergeAction({
    complete: process.argv[2],
    subset: process.argv[3],
    output: process.argv[4],
  });
}
else if (process.argv.length === 6 && ['--yes', '-y', '--no', '-n'].indexOf(process.argv[2]) !== -1) {
  mergeAction({
    complete: process.argv[3],
    subset: process.argv[4],
    output: process.argv[5],
  }, process.argv[2].replace(/-/g, ''));
}
else {
    console.log("Usage: node msgintersect [--yes/--no] :complete :subset :output");
    console.log("Prompts can be skipped with --yes or --no for non-interactive execution.");
    process.exit(1);
}

// Command Execution Callbacks
// ----------------------------------------------------------------------------

function mergeAction (data, overwrite = null) {
    if (!fs.existsSync(data.complete)) return error('> File "' + data.complete + '" not found.');
    if (!fs.existsSync(data.subset)) return error('> File "' + data.subset + '" not found.');

    console.info('> Loading files'.green);

    var file1 = fs.readFileSync(data.complete);
    var file2 = fs.readFileSync(data.subset);

    var gtxt1 = new Gettext();
    var gtxt2 = new Gettext();

    gtxt1.addTextdomain('en', file1);
    gtxt2.addTextdomain('en', file2);

    console.info('- Found %d strings in "%s"'.blue, gtxt1.listKeys().length, data.complete);
    console.info('- Found %d strings in "%s"'.blue, gtxt2.listKeys().length, data.subset);

    console.info('> Running comparison'.green);

    var gtxt2Keys = gtxt2.listKeys();
    var translatedCount = 0;
    var notTranslatedCount = 0;

    for (var i = 0; i < gtxt2Keys.length; i += 1) {
        var msgid = gtxt2Keys[i];
        var msgstr = gtxt1.gettext(gtxt2Keys[i]);

        if (msgstr == msgid) {
            notTranslatedCount++;
            continue;
        }

        translatedCount++;
        gtxt2.setTranslation('en', '', msgid, msgstr);
    }

    console.info('> Comparison finished'.green);
    console.info('- Found %d translated strings'.blue, translatedCount);
    console.info('- Found %d not translated strings'.blue, notTranslatedCount);

    var outputBuffer = gtxt2.compilePO();

    if (fs.existsSync(data.output)) {
        const handleOverwrite = (answer) => {
          switch (answer) {
            case 'n':
            case 'no':
              console.info('> Merge cancelled.');
              break;
            case 'y':
            case 'yes':
              console.info('> Generating output'.green);
              writeOutput(data.output, outputBuffer);
              break;
            default:
              prompt(`File "${data.output}" already exists. Do you want to overwrite it? [yes/no] `, handleOverwrite);
          }
        };

        handleOverwrite(overwrite)
    } else {
        writeOutput(data.output, outputBuffer);
    }
}

// Helpers
// ----------------------------------------------------------------------------

function prompt(question, callback) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(question, (answer) => {
    rl.close();

    callback(answer);
  });
}

function error (messageString) {
    console.error(messageString.red);
    process.exit(1);
}

function writeOutput (fileName, outputBuffer) {
    fs.writeFileSync(fileName, outputBuffer);
}
